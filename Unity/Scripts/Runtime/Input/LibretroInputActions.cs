//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Packages/com.sk.libretro/Unity/LibretroInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace SK.Libretro.Unity
{
    public partial class @LibretroInputActions: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @LibretroInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""LibretroInputActions"",
    ""maps"": [
        {
            ""name"": ""Analog"",
            ""id"": ""639a1fe9-28e1-41ea-a98f-20b729bf505d"",
            ""actions"": [
                {
                    ""name"": ""AnalogLeft"",
                    ""type"": ""Value"",
                    ""id"": ""aaed2d22-18ab-499b-938e-128babfb1990"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""AnalogRight"",
                    ""type"": ""Value"",
                    ""id"": ""33e61395-ed75-410b-8436-109b9a22c0d4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""6de0fe59-4468-4eb5-9a55-25837dfe2afa"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AnalogLeft"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c944e32d-a22d-4e1c-b65e-244ed36784c8"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""AnalogLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3b96f711-1709-4e63-ae92-948de62aecf0"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""AnalogLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5952f758-0653-411f-9e44-73960cf85d34"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""AnalogLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a55346eb-cf09-4212-a434-30ad1ed33f45"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""AnalogLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0c7b528c-a20e-46fa-810f-6326a5cb489a"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""AnalogLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f1dd4b8-b6b2-4e43-839f-66d5db70c234"",
                    ""path"": ""<XRController>{LeftHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Quest"",
                    ""action"": ""AnalogLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""IKJL"",
                    ""id"": ""5bb1c0a4-029c-4fc2-98ee-b10948e88cb9"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AnalogRight"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c8dd1e6e-6233-4955-9bfc-5f00285872ff"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""AnalogRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""32425c06-7628-4c31-b079-6ceb88393a1d"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""AnalogRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0fd4ffcc-f930-44d5-b220-3fbfa1aae7a5"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""AnalogRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""77ecd2d7-cd66-4b40-8ea0-12ff7eeeec21"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""AnalogRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4d17b086-e9e6-41b5-a26c-cec83d93138f"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""AnalogRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0c67ae08-140a-4691-b9c8-a86d745dc4d9"",
                    ""path"": ""<XRController>{RightHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Quest"",
                    ""action"": ""AnalogRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Joypad"",
            ""id"": ""02a123b2-5ff3-465c-81e5-5e9aa95a4bbc"",
            ""actions"": [
                {
                    ""name"": ""JoypadDPadUp"",
                    ""type"": ""Button"",
                    ""id"": ""6b508597-03b3-4b52-a7e8-152d0fe592e1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JoypadDPadDown"",
                    ""type"": ""Button"",
                    ""id"": ""351e922a-189f-4a08-beb7-549d6c9ca3dc"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JoypadDPadLeft"",
                    ""type"": ""Button"",
                    ""id"": ""e45e8c21-7373-42b5-945e-c275b51d2e3d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JoypadDPadRight"",
                    ""type"": ""Button"",
                    ""id"": ""72a099aa-87d2-49da-9abd-630e402ce32d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JoypadStart"",
                    ""type"": ""Button"",
                    ""id"": ""0e9cf1ec-cc93-4259-8a9a-d5a80fd3f782"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JoypadSelect"",
                    ""type"": ""Button"",
                    ""id"": ""fd9fe054-84aa-4bea-9920-35414de0a532"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JoypadA"",
                    ""type"": ""Button"",
                    ""id"": ""2af78571-514e-46e5-8483-a8a8af08e8d6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JoypadB"",
                    ""type"": ""Button"",
                    ""id"": ""99e31b1b-ac8e-4610-9c89-c29f459016bb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JoypadX"",
                    ""type"": ""Button"",
                    ""id"": ""daf5dcd3-fa6c-4842-81cd-4d1c9db87cb2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JoypadY"",
                    ""type"": ""Button"",
                    ""id"": ""36bb6b22-cda7-4655-91bf-dba143ddcc2e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JoypadL1"",
                    ""type"": ""Button"",
                    ""id"": ""02173eb5-ed46-4b73-9760-575ae58abbd3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JoypadL2"",
                    ""type"": ""Button"",
                    ""id"": ""fc06be35-276e-48ff-a6ab-41f4edad7b66"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JoypadL3"",
                    ""type"": ""Button"",
                    ""id"": ""da5ab40a-f429-4346-8c65-3075a4f38358"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JoypadR1"",
                    ""type"": ""Button"",
                    ""id"": ""85a8a3e9-9956-496d-b4f9-eb8816d4c855"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JoypadR2"",
                    ""type"": ""Button"",
                    ""id"": ""2c302acc-4c5d-4ee9-95e5-e42211be49c1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JoypadR3"",
                    ""type"": ""Button"",
                    ""id"": ""9bf18c8e-3f22-4dac-8758-85b053ed627a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b30e6373-a0f2-4262-9805-0553efae9c89"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""JoypadStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4ec4240e-7b88-4e11-a453-f5a77368aab8"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""JoypadStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""227a8618-97d4-4c6e-9e56-62d4958dd7ad"",
                    ""path"": ""<Keyboard>/rightShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""JoypadSelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e3ae9114-5dcc-4fe7-9885-7f309b45d732"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""JoypadSelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eae12c89-8d96-4c17-b405-b6efaa794b0d"",
                    ""path"": ""<Keyboard>/numpad2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""JoypadA"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a4df0a4b-b0db-4da5-8ea0-fd69e5a2b170"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""JoypadA"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0452f4c1-3d05-4462-b583-414fe720d775"",
                    ""path"": ""<XRController>{RightHand}/{PrimaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Quest"",
                    ""action"": ""JoypadA"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""520058f1-f8ab-46b6-bdf6-78d68c2686c4"",
                    ""path"": ""<Keyboard>/numpad1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""JoypadB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""768932d0-326f-42c1-8966-bedde23e11ed"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""JoypadB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eae79e73-df6f-4a59-b244-5d897450a0de"",
                    ""path"": ""<XRController>{RightHand}/{SecondaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Quest"",
                    ""action"": ""JoypadB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""14bc8992-ed2c-4e1d-a209-5b37eaa862a7"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""JoypadR3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1fdb8fce-b677-44ea-9e89-e12bd3647e23"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""JoypadR3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9a0a800e-fe8a-434a-babf-36bf20bb0c75"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""JoypadR2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c1e89de1-16a7-456b-a0c1-088024234127"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""JoypadR2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""45d59990-4000-41aa-9453-b2cad1fcbb75"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""JoypadL2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f64be3cd-3459-4871-b540-b28cc9cc64e3"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""JoypadL2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""530a5392-4a41-48bb-ab42-7ab52fdca101"",
                    ""path"": ""<Keyboard>/numpad5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""JoypadL1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""79723b92-9988-4e01-847b-bf87a25b14b2"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""JoypadL1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3b885091-71a1-4282-b66c-403ebfd18816"",
                    ""path"": ""<Keyboard>/numpad3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""JoypadY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f48e3075-0182-4928-b0a6-f0fac569fb3d"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""JoypadY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f509da8e-45f9-43c3-9a1b-3541e8cfc910"",
                    ""path"": ""<Keyboard>/numpad4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""JoypadX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""20c4d7cb-1d81-4ba8-b6c8-02eb5ef2c2c8"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""JoypadX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea791b41-a38a-44df-bc63-7d003d10661a"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""JoypadL3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7e418545-81b5-4d1c-a732-ccb549e5b259"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""JoypadL3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5cffdae1-c596-4797-8f7a-97744e959a7a"",
                    ""path"": ""<Keyboard>/numpad6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""JoypadR1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ca973b64-a0d7-42ed-b7cd-a2a317673510"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""JoypadR1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6318b768-fc90-40e7-aa11-db121da39130"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""JoypadDPadUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""22ee6c4b-41f0-4749-8181-e9918e53fcc8"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""JoypadDPadUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b0ad64b1-5f7a-451a-8cc5-330e776cf822"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""JoypadDPadDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""56c39b68-6416-4bb1-8f89-e0f7167fcd36"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""JoypadDPadDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f3d8e268-c26a-471a-82b5-24a36dd33e00"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""JoypadDPadLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6fa4ba32-b76d-466d-81ad-06c2497620df"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""JoypadDPadLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""55ff0182-7ff6-491f-a953-65a2b70810f3"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""JoypadDPadRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f8166c25-0e41-4a92-83e7-3db214da4d18"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""JoypadDPadRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""144f70c3-f29f-48b1-ab36-b6dd74a99ebe"",
                    ""path"": ""<XRController>{LeftHand}/{PrimaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Quest"",
                    ""action"": ""JoypadStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bf88d73e-67aa-4a7b-a463-63ee6b738792"",
                    ""path"": ""<XRController>{LeftHand}/{SecondaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Quest"",
                    ""action"": ""JoypadSelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Mouse"",
            ""id"": ""3d318775-3fcb-4c97-838a-05af1b09ad09"",
            ""actions"": [
                {
                    ""name"": ""MousePositionDelta"",
                    ""type"": ""Value"",
                    ""id"": ""9c9e4080-f4e9-4c80-a964-c8bf67ad08a7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseWheelDelta"",
                    ""type"": ""Value"",
                    ""id"": ""93e0d92c-3473-4ac4-9ea3-3bfa0f2dda26"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseLeftButton"",
                    ""type"": ""Button"",
                    ""id"": ""777e08bd-1386-4cf1-87a0-9dc63d32a856"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseRightButton"",
                    ""type"": ""Button"",
                    ""id"": ""5eb02909-c2c4-421d-b129-8c59b9e6ef35"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseMiddleButton"",
                    ""type"": ""Button"",
                    ""id"": ""5c2898bb-f8bc-40cf-af40-45bcda1d92b4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseForwardButton"",
                    ""type"": ""Button"",
                    ""id"": ""9c2390b8-01dc-425b-aa43-2c63e02b0098"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseBackButton"",
                    ""type"": ""Button"",
                    ""id"": ""227fd3ad-3b12-4f49-8b4e-b736990fbfef"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0656da91-9c15-4508-a6eb-3a73d3917246"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""MousePositionDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""96e68876-1f6f-4821-a94f-a0c3ca593252"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""MouseWheelDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4685467a-7e72-46cb-9e00-1f01e3cc3d46"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""MouseLeftButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""830b5cad-4895-44ed-891c-1ed92286e631"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""MouseRightButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c07a4fdd-40f0-480a-9e98-a56bfddad181"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""MouseMiddleButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9a706344-e79a-4109-965f-a5e28ddd1f68"",
                    ""path"": ""<Mouse>/forwardButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""MouseForwardButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""11933f09-8048-47a9-a336-91959ecdaea9"",
                    ""path"": ""<Mouse>/backButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""MouseBackButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard"",
            ""id"": ""ebc9561a-2286-4e75-ac42-f2f91f8330a4"",
            ""actions"": [
                {
                    ""name"": ""KeyboardKey"",
                    ""type"": ""Button"",
                    ""id"": ""1725545d-552a-4759-bf7e-95bc6f205fb2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""16e05e6c-3d6a-45c6-b195-de64d2d02a6a"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""KeyboardKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Pointer"",
            ""id"": ""78ac98be-c79f-4812-8557-f04c8a5f4c65"",
            ""actions"": [],
            ""bindings"": []
        },
        {
            ""name"": ""Lightgun"",
            ""id"": ""9c6bd460-42dc-4c6a-96b1-c2e9a5aff822"",
            ""actions"": [
                {
                    ""name"": ""LightgunTrigger"",
                    ""type"": ""Button"",
                    ""id"": ""c7429b7a-42d9-4162-89a8-691ac1a81bbe"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LightgunReload"",
                    ""type"": ""Button"",
                    ""id"": ""e807daa4-7781-4125-85d1-ed6ebd14ad15"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LightgunA"",
                    ""type"": ""Button"",
                    ""id"": ""8586fb2c-cc9f-4d2c-85b9-247a6ea96bd9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LightgunB"",
                    ""type"": ""Button"",
                    ""id"": ""a70b23e4-a817-434a-b698-3e06061a45b1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LightgunStart"",
                    ""type"": ""Button"",
                    ""id"": ""74b4cd99-208b-4fe3-a3d5-f0d342efe8c9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LightgunSelect"",
                    ""type"": ""Button"",
                    ""id"": ""34ef0e4c-433f-4b0f-b04e-6125e558bfad"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LightgunC"",
                    ""type"": ""Button"",
                    ""id"": ""83ef0e1b-c81d-49d4-a5af-7b0cc2747650"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LightgunDPadUp"",
                    ""type"": ""Button"",
                    ""id"": ""e7e6e48d-b337-4ed4-b2e4-3053decb9ee2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LightgunDPadDown"",
                    ""type"": ""Button"",
                    ""id"": ""7aa361df-d80f-449d-9762-aea7c7c9dc50"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LightgunDPadLeft"",
                    ""type"": ""Button"",
                    ""id"": ""687f2144-dd6d-46f7-a678-3ddcd4dc3393"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LightgunDPadRight"",
                    ""type"": ""Button"",
                    ""id"": ""4b184c23-228a-4daf-acae-a0533e57e5f3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""146e7a60-6abd-4faf-8598-e1e16a71ad66"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""LightgunTrigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c9b51325-95fc-4864-a444-df3aca0b7505"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""LightgunReload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c75bfccf-b98c-44db-8785-2b41261a2d9f"",
                    ""path"": ""<Mouse>/forwardButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""LightgunA"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a660ed78-0a91-4f4b-83f3-d29262d86da7"",
                    ""path"": ""<Mouse>/backButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""LightgunB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d1be3e64-f34a-4612-859e-0af812166980"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""LightgunStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7b893684-363a-4641-80e1-bbb41fcc6322"",
                    ""path"": ""<Keyboard>/rightShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""LightgunSelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e64f20e0-b055-4529-8f0d-2376fc7ec583"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""LightgunC"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""090f4561-6744-4c76-87b2-231470e58aab"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""LightgunDPadUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9f6358ad-dbe2-4349-8e32-9144bc23802a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""LightgunDPadDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""82508d6c-2f8e-4a1b-ab58-065d2b764e5d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""LightgunDPadLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5b95bce8-29a0-484c-9f09-db8c1ebd9296"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""LightgunDPadRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Quest"",
            ""bindingGroup"": ""Quest"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>{LeftHand}/{Device}"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XRController>{RightHand}/{Device}"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Analog
            m_Analog = asset.FindActionMap("Analog", throwIfNotFound: true);
            m_Analog_AnalogLeft = m_Analog.FindAction("AnalogLeft", throwIfNotFound: true);
            m_Analog_AnalogRight = m_Analog.FindAction("AnalogRight", throwIfNotFound: true);
            // Joypad
            m_Joypad = asset.FindActionMap("Joypad", throwIfNotFound: true);
            m_Joypad_JoypadDPadUp = m_Joypad.FindAction("JoypadDPadUp", throwIfNotFound: true);
            m_Joypad_JoypadDPadDown = m_Joypad.FindAction("JoypadDPadDown", throwIfNotFound: true);
            m_Joypad_JoypadDPadLeft = m_Joypad.FindAction("JoypadDPadLeft", throwIfNotFound: true);
            m_Joypad_JoypadDPadRight = m_Joypad.FindAction("JoypadDPadRight", throwIfNotFound: true);
            m_Joypad_JoypadStart = m_Joypad.FindAction("JoypadStart", throwIfNotFound: true);
            m_Joypad_JoypadSelect = m_Joypad.FindAction("JoypadSelect", throwIfNotFound: true);
            m_Joypad_JoypadA = m_Joypad.FindAction("JoypadA", throwIfNotFound: true);
            m_Joypad_JoypadB = m_Joypad.FindAction("JoypadB", throwIfNotFound: true);
            m_Joypad_JoypadX = m_Joypad.FindAction("JoypadX", throwIfNotFound: true);
            m_Joypad_JoypadY = m_Joypad.FindAction("JoypadY", throwIfNotFound: true);
            m_Joypad_JoypadL1 = m_Joypad.FindAction("JoypadL1", throwIfNotFound: true);
            m_Joypad_JoypadL2 = m_Joypad.FindAction("JoypadL2", throwIfNotFound: true);
            m_Joypad_JoypadL3 = m_Joypad.FindAction("JoypadL3", throwIfNotFound: true);
            m_Joypad_JoypadR1 = m_Joypad.FindAction("JoypadR1", throwIfNotFound: true);
            m_Joypad_JoypadR2 = m_Joypad.FindAction("JoypadR2", throwIfNotFound: true);
            m_Joypad_JoypadR3 = m_Joypad.FindAction("JoypadR3", throwIfNotFound: true);
            // Mouse
            m_Mouse = asset.FindActionMap("Mouse", throwIfNotFound: true);
            m_Mouse_MousePositionDelta = m_Mouse.FindAction("MousePositionDelta", throwIfNotFound: true);
            m_Mouse_MouseWheelDelta = m_Mouse.FindAction("MouseWheelDelta", throwIfNotFound: true);
            m_Mouse_MouseLeftButton = m_Mouse.FindAction("MouseLeftButton", throwIfNotFound: true);
            m_Mouse_MouseRightButton = m_Mouse.FindAction("MouseRightButton", throwIfNotFound: true);
            m_Mouse_MouseMiddleButton = m_Mouse.FindAction("MouseMiddleButton", throwIfNotFound: true);
            m_Mouse_MouseForwardButton = m_Mouse.FindAction("MouseForwardButton", throwIfNotFound: true);
            m_Mouse_MouseBackButton = m_Mouse.FindAction("MouseBackButton", throwIfNotFound: true);
            // Keyboard
            m_Keyboard = asset.FindActionMap("Keyboard", throwIfNotFound: true);
            m_Keyboard_KeyboardKey = m_Keyboard.FindAction("KeyboardKey", throwIfNotFound: true);
            // Pointer
            m_Pointer = asset.FindActionMap("Pointer", throwIfNotFound: true);
            // Lightgun
            m_Lightgun = asset.FindActionMap("Lightgun", throwIfNotFound: true);
            m_Lightgun_LightgunTrigger = m_Lightgun.FindAction("LightgunTrigger", throwIfNotFound: true);
            m_Lightgun_LightgunReload = m_Lightgun.FindAction("LightgunReload", throwIfNotFound: true);
            m_Lightgun_LightgunA = m_Lightgun.FindAction("LightgunA", throwIfNotFound: true);
            m_Lightgun_LightgunB = m_Lightgun.FindAction("LightgunB", throwIfNotFound: true);
            m_Lightgun_LightgunStart = m_Lightgun.FindAction("LightgunStart", throwIfNotFound: true);
            m_Lightgun_LightgunSelect = m_Lightgun.FindAction("LightgunSelect", throwIfNotFound: true);
            m_Lightgun_LightgunC = m_Lightgun.FindAction("LightgunC", throwIfNotFound: true);
            m_Lightgun_LightgunDPadUp = m_Lightgun.FindAction("LightgunDPadUp", throwIfNotFound: true);
            m_Lightgun_LightgunDPadDown = m_Lightgun.FindAction("LightgunDPadDown", throwIfNotFound: true);
            m_Lightgun_LightgunDPadLeft = m_Lightgun.FindAction("LightgunDPadLeft", throwIfNotFound: true);
            m_Lightgun_LightgunDPadRight = m_Lightgun.FindAction("LightgunDPadRight", throwIfNotFound: true);
        }

        ~@LibretroInputActions()
        {
            UnityEngine.Debug.Assert(!m_Analog.enabled, "This will cause a leak and performance issues, LibretroInputActions.Analog.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_Joypad.enabled, "This will cause a leak and performance issues, LibretroInputActions.Joypad.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_Mouse.enabled, "This will cause a leak and performance issues, LibretroInputActions.Mouse.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_Keyboard.enabled, "This will cause a leak and performance issues, LibretroInputActions.Keyboard.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_Pointer.enabled, "This will cause a leak and performance issues, LibretroInputActions.Pointer.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_Lightgun.enabled, "This will cause a leak and performance issues, LibretroInputActions.Lightgun.Disable() has not been called.");
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Analog
        private readonly InputActionMap m_Analog;
        private List<IAnalogActions> m_AnalogActionsCallbackInterfaces = new List<IAnalogActions>();
        private readonly InputAction m_Analog_AnalogLeft;
        private readonly InputAction m_Analog_AnalogRight;
        public struct AnalogActions
        {
            private @LibretroInputActions m_Wrapper;
            public AnalogActions(@LibretroInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @AnalogLeft => m_Wrapper.m_Analog_AnalogLeft;
            public InputAction @AnalogRight => m_Wrapper.m_Analog_AnalogRight;
            public InputActionMap Get() { return m_Wrapper.m_Analog; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(AnalogActions set) { return set.Get(); }
            public void AddCallbacks(IAnalogActions instance)
            {
                if (instance == null || m_Wrapper.m_AnalogActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_AnalogActionsCallbackInterfaces.Add(instance);
                @AnalogLeft.started += instance.OnAnalogLeft;
                @AnalogLeft.performed += instance.OnAnalogLeft;
                @AnalogLeft.canceled += instance.OnAnalogLeft;
                @AnalogRight.started += instance.OnAnalogRight;
                @AnalogRight.performed += instance.OnAnalogRight;
                @AnalogRight.canceled += instance.OnAnalogRight;
            }

            private void UnregisterCallbacks(IAnalogActions instance)
            {
                @AnalogLeft.started -= instance.OnAnalogLeft;
                @AnalogLeft.performed -= instance.OnAnalogLeft;
                @AnalogLeft.canceled -= instance.OnAnalogLeft;
                @AnalogRight.started -= instance.OnAnalogRight;
                @AnalogRight.performed -= instance.OnAnalogRight;
                @AnalogRight.canceled -= instance.OnAnalogRight;
            }

            public void RemoveCallbacks(IAnalogActions instance)
            {
                if (m_Wrapper.m_AnalogActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IAnalogActions instance)
            {
                foreach (var item in m_Wrapper.m_AnalogActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_AnalogActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public AnalogActions @Analog => new AnalogActions(this);

        // Joypad
        private readonly InputActionMap m_Joypad;
        private List<IJoypadActions> m_JoypadActionsCallbackInterfaces = new List<IJoypadActions>();
        private readonly InputAction m_Joypad_JoypadDPadUp;
        private readonly InputAction m_Joypad_JoypadDPadDown;
        private readonly InputAction m_Joypad_JoypadDPadLeft;
        private readonly InputAction m_Joypad_JoypadDPadRight;
        private readonly InputAction m_Joypad_JoypadStart;
        private readonly InputAction m_Joypad_JoypadSelect;
        private readonly InputAction m_Joypad_JoypadA;
        private readonly InputAction m_Joypad_JoypadB;
        private readonly InputAction m_Joypad_JoypadX;
        private readonly InputAction m_Joypad_JoypadY;
        private readonly InputAction m_Joypad_JoypadL1;
        private readonly InputAction m_Joypad_JoypadL2;
        private readonly InputAction m_Joypad_JoypadL3;
        private readonly InputAction m_Joypad_JoypadR1;
        private readonly InputAction m_Joypad_JoypadR2;
        private readonly InputAction m_Joypad_JoypadR3;
        public struct JoypadActions
        {
            private @LibretroInputActions m_Wrapper;
            public JoypadActions(@LibretroInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @JoypadDPadUp => m_Wrapper.m_Joypad_JoypadDPadUp;
            public InputAction @JoypadDPadDown => m_Wrapper.m_Joypad_JoypadDPadDown;
            public InputAction @JoypadDPadLeft => m_Wrapper.m_Joypad_JoypadDPadLeft;
            public InputAction @JoypadDPadRight => m_Wrapper.m_Joypad_JoypadDPadRight;
            public InputAction @JoypadStart => m_Wrapper.m_Joypad_JoypadStart;
            public InputAction @JoypadSelect => m_Wrapper.m_Joypad_JoypadSelect;
            public InputAction @JoypadA => m_Wrapper.m_Joypad_JoypadA;
            public InputAction @JoypadB => m_Wrapper.m_Joypad_JoypadB;
            public InputAction @JoypadX => m_Wrapper.m_Joypad_JoypadX;
            public InputAction @JoypadY => m_Wrapper.m_Joypad_JoypadY;
            public InputAction @JoypadL1 => m_Wrapper.m_Joypad_JoypadL1;
            public InputAction @JoypadL2 => m_Wrapper.m_Joypad_JoypadL2;
            public InputAction @JoypadL3 => m_Wrapper.m_Joypad_JoypadL3;
            public InputAction @JoypadR1 => m_Wrapper.m_Joypad_JoypadR1;
            public InputAction @JoypadR2 => m_Wrapper.m_Joypad_JoypadR2;
            public InputAction @JoypadR3 => m_Wrapper.m_Joypad_JoypadR3;
            public InputActionMap Get() { return m_Wrapper.m_Joypad; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(JoypadActions set) { return set.Get(); }
            public void AddCallbacks(IJoypadActions instance)
            {
                if (instance == null || m_Wrapper.m_JoypadActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_JoypadActionsCallbackInterfaces.Add(instance);
                @JoypadDPadUp.started += instance.OnJoypadDPadUp;
                @JoypadDPadUp.performed += instance.OnJoypadDPadUp;
                @JoypadDPadUp.canceled += instance.OnJoypadDPadUp;
                @JoypadDPadDown.started += instance.OnJoypadDPadDown;
                @JoypadDPadDown.performed += instance.OnJoypadDPadDown;
                @JoypadDPadDown.canceled += instance.OnJoypadDPadDown;
                @JoypadDPadLeft.started += instance.OnJoypadDPadLeft;
                @JoypadDPadLeft.performed += instance.OnJoypadDPadLeft;
                @JoypadDPadLeft.canceled += instance.OnJoypadDPadLeft;
                @JoypadDPadRight.started += instance.OnJoypadDPadRight;
                @JoypadDPadRight.performed += instance.OnJoypadDPadRight;
                @JoypadDPadRight.canceled += instance.OnJoypadDPadRight;
                @JoypadStart.started += instance.OnJoypadStart;
                @JoypadStart.performed += instance.OnJoypadStart;
                @JoypadStart.canceled += instance.OnJoypadStart;
                @JoypadSelect.started += instance.OnJoypadSelect;
                @JoypadSelect.performed += instance.OnJoypadSelect;
                @JoypadSelect.canceled += instance.OnJoypadSelect;
                @JoypadA.started += instance.OnJoypadA;
                @JoypadA.performed += instance.OnJoypadA;
                @JoypadA.canceled += instance.OnJoypadA;
                @JoypadB.started += instance.OnJoypadB;
                @JoypadB.performed += instance.OnJoypadB;
                @JoypadB.canceled += instance.OnJoypadB;
                @JoypadX.started += instance.OnJoypadX;
                @JoypadX.performed += instance.OnJoypadX;
                @JoypadX.canceled += instance.OnJoypadX;
                @JoypadY.started += instance.OnJoypadY;
                @JoypadY.performed += instance.OnJoypadY;
                @JoypadY.canceled += instance.OnJoypadY;
                @JoypadL1.started += instance.OnJoypadL1;
                @JoypadL1.performed += instance.OnJoypadL1;
                @JoypadL1.canceled += instance.OnJoypadL1;
                @JoypadL2.started += instance.OnJoypadL2;
                @JoypadL2.performed += instance.OnJoypadL2;
                @JoypadL2.canceled += instance.OnJoypadL2;
                @JoypadL3.started += instance.OnJoypadL3;
                @JoypadL3.performed += instance.OnJoypadL3;
                @JoypadL3.canceled += instance.OnJoypadL3;
                @JoypadR1.started += instance.OnJoypadR1;
                @JoypadR1.performed += instance.OnJoypadR1;
                @JoypadR1.canceled += instance.OnJoypadR1;
                @JoypadR2.started += instance.OnJoypadR2;
                @JoypadR2.performed += instance.OnJoypadR2;
                @JoypadR2.canceled += instance.OnJoypadR2;
                @JoypadR3.started += instance.OnJoypadR3;
                @JoypadR3.performed += instance.OnJoypadR3;
                @JoypadR3.canceled += instance.OnJoypadR3;
            }

            private void UnregisterCallbacks(IJoypadActions instance)
            {
                @JoypadDPadUp.started -= instance.OnJoypadDPadUp;
                @JoypadDPadUp.performed -= instance.OnJoypadDPadUp;
                @JoypadDPadUp.canceled -= instance.OnJoypadDPadUp;
                @JoypadDPadDown.started -= instance.OnJoypadDPadDown;
                @JoypadDPadDown.performed -= instance.OnJoypadDPadDown;
                @JoypadDPadDown.canceled -= instance.OnJoypadDPadDown;
                @JoypadDPadLeft.started -= instance.OnJoypadDPadLeft;
                @JoypadDPadLeft.performed -= instance.OnJoypadDPadLeft;
                @JoypadDPadLeft.canceled -= instance.OnJoypadDPadLeft;
                @JoypadDPadRight.started -= instance.OnJoypadDPadRight;
                @JoypadDPadRight.performed -= instance.OnJoypadDPadRight;
                @JoypadDPadRight.canceled -= instance.OnJoypadDPadRight;
                @JoypadStart.started -= instance.OnJoypadStart;
                @JoypadStart.performed -= instance.OnJoypadStart;
                @JoypadStart.canceled -= instance.OnJoypadStart;
                @JoypadSelect.started -= instance.OnJoypadSelect;
                @JoypadSelect.performed -= instance.OnJoypadSelect;
                @JoypadSelect.canceled -= instance.OnJoypadSelect;
                @JoypadA.started -= instance.OnJoypadA;
                @JoypadA.performed -= instance.OnJoypadA;
                @JoypadA.canceled -= instance.OnJoypadA;
                @JoypadB.started -= instance.OnJoypadB;
                @JoypadB.performed -= instance.OnJoypadB;
                @JoypadB.canceled -= instance.OnJoypadB;
                @JoypadX.started -= instance.OnJoypadX;
                @JoypadX.performed -= instance.OnJoypadX;
                @JoypadX.canceled -= instance.OnJoypadX;
                @JoypadY.started -= instance.OnJoypadY;
                @JoypadY.performed -= instance.OnJoypadY;
                @JoypadY.canceled -= instance.OnJoypadY;
                @JoypadL1.started -= instance.OnJoypadL1;
                @JoypadL1.performed -= instance.OnJoypadL1;
                @JoypadL1.canceled -= instance.OnJoypadL1;
                @JoypadL2.started -= instance.OnJoypadL2;
                @JoypadL2.performed -= instance.OnJoypadL2;
                @JoypadL2.canceled -= instance.OnJoypadL2;
                @JoypadL3.started -= instance.OnJoypadL3;
                @JoypadL3.performed -= instance.OnJoypadL3;
                @JoypadL3.canceled -= instance.OnJoypadL3;
                @JoypadR1.started -= instance.OnJoypadR1;
                @JoypadR1.performed -= instance.OnJoypadR1;
                @JoypadR1.canceled -= instance.OnJoypadR1;
                @JoypadR2.started -= instance.OnJoypadR2;
                @JoypadR2.performed -= instance.OnJoypadR2;
                @JoypadR2.canceled -= instance.OnJoypadR2;
                @JoypadR3.started -= instance.OnJoypadR3;
                @JoypadR3.performed -= instance.OnJoypadR3;
                @JoypadR3.canceled -= instance.OnJoypadR3;
            }

            public void RemoveCallbacks(IJoypadActions instance)
            {
                if (m_Wrapper.m_JoypadActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IJoypadActions instance)
            {
                foreach (var item in m_Wrapper.m_JoypadActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_JoypadActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public JoypadActions @Joypad => new JoypadActions(this);

        // Mouse
        private readonly InputActionMap m_Mouse;
        private List<IMouseActions> m_MouseActionsCallbackInterfaces = new List<IMouseActions>();
        private readonly InputAction m_Mouse_MousePositionDelta;
        private readonly InputAction m_Mouse_MouseWheelDelta;
        private readonly InputAction m_Mouse_MouseLeftButton;
        private readonly InputAction m_Mouse_MouseRightButton;
        private readonly InputAction m_Mouse_MouseMiddleButton;
        private readonly InputAction m_Mouse_MouseForwardButton;
        private readonly InputAction m_Mouse_MouseBackButton;
        public struct MouseActions
        {
            private @LibretroInputActions m_Wrapper;
            public MouseActions(@LibretroInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @MousePositionDelta => m_Wrapper.m_Mouse_MousePositionDelta;
            public InputAction @MouseWheelDelta => m_Wrapper.m_Mouse_MouseWheelDelta;
            public InputAction @MouseLeftButton => m_Wrapper.m_Mouse_MouseLeftButton;
            public InputAction @MouseRightButton => m_Wrapper.m_Mouse_MouseRightButton;
            public InputAction @MouseMiddleButton => m_Wrapper.m_Mouse_MouseMiddleButton;
            public InputAction @MouseForwardButton => m_Wrapper.m_Mouse_MouseForwardButton;
            public InputAction @MouseBackButton => m_Wrapper.m_Mouse_MouseBackButton;
            public InputActionMap Get() { return m_Wrapper.m_Mouse; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MouseActions set) { return set.Get(); }
            public void AddCallbacks(IMouseActions instance)
            {
                if (instance == null || m_Wrapper.m_MouseActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_MouseActionsCallbackInterfaces.Add(instance);
                @MousePositionDelta.started += instance.OnMousePositionDelta;
                @MousePositionDelta.performed += instance.OnMousePositionDelta;
                @MousePositionDelta.canceled += instance.OnMousePositionDelta;
                @MouseWheelDelta.started += instance.OnMouseWheelDelta;
                @MouseWheelDelta.performed += instance.OnMouseWheelDelta;
                @MouseWheelDelta.canceled += instance.OnMouseWheelDelta;
                @MouseLeftButton.started += instance.OnMouseLeftButton;
                @MouseLeftButton.performed += instance.OnMouseLeftButton;
                @MouseLeftButton.canceled += instance.OnMouseLeftButton;
                @MouseRightButton.started += instance.OnMouseRightButton;
                @MouseRightButton.performed += instance.OnMouseRightButton;
                @MouseRightButton.canceled += instance.OnMouseRightButton;
                @MouseMiddleButton.started += instance.OnMouseMiddleButton;
                @MouseMiddleButton.performed += instance.OnMouseMiddleButton;
                @MouseMiddleButton.canceled += instance.OnMouseMiddleButton;
                @MouseForwardButton.started += instance.OnMouseForwardButton;
                @MouseForwardButton.performed += instance.OnMouseForwardButton;
                @MouseForwardButton.canceled += instance.OnMouseForwardButton;
                @MouseBackButton.started += instance.OnMouseBackButton;
                @MouseBackButton.performed += instance.OnMouseBackButton;
                @MouseBackButton.canceled += instance.OnMouseBackButton;
            }

            private void UnregisterCallbacks(IMouseActions instance)
            {
                @MousePositionDelta.started -= instance.OnMousePositionDelta;
                @MousePositionDelta.performed -= instance.OnMousePositionDelta;
                @MousePositionDelta.canceled -= instance.OnMousePositionDelta;
                @MouseWheelDelta.started -= instance.OnMouseWheelDelta;
                @MouseWheelDelta.performed -= instance.OnMouseWheelDelta;
                @MouseWheelDelta.canceled -= instance.OnMouseWheelDelta;
                @MouseLeftButton.started -= instance.OnMouseLeftButton;
                @MouseLeftButton.performed -= instance.OnMouseLeftButton;
                @MouseLeftButton.canceled -= instance.OnMouseLeftButton;
                @MouseRightButton.started -= instance.OnMouseRightButton;
                @MouseRightButton.performed -= instance.OnMouseRightButton;
                @MouseRightButton.canceled -= instance.OnMouseRightButton;
                @MouseMiddleButton.started -= instance.OnMouseMiddleButton;
                @MouseMiddleButton.performed -= instance.OnMouseMiddleButton;
                @MouseMiddleButton.canceled -= instance.OnMouseMiddleButton;
                @MouseForwardButton.started -= instance.OnMouseForwardButton;
                @MouseForwardButton.performed -= instance.OnMouseForwardButton;
                @MouseForwardButton.canceled -= instance.OnMouseForwardButton;
                @MouseBackButton.started -= instance.OnMouseBackButton;
                @MouseBackButton.performed -= instance.OnMouseBackButton;
                @MouseBackButton.canceled -= instance.OnMouseBackButton;
            }

            public void RemoveCallbacks(IMouseActions instance)
            {
                if (m_Wrapper.m_MouseActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IMouseActions instance)
            {
                foreach (var item in m_Wrapper.m_MouseActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_MouseActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public MouseActions @Mouse => new MouseActions(this);

        // Keyboard
        private readonly InputActionMap m_Keyboard;
        private List<IKeyboardActions> m_KeyboardActionsCallbackInterfaces = new List<IKeyboardActions>();
        private readonly InputAction m_Keyboard_KeyboardKey;
        public struct KeyboardActions
        {
            private @LibretroInputActions m_Wrapper;
            public KeyboardActions(@LibretroInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @KeyboardKey => m_Wrapper.m_Keyboard_KeyboardKey;
            public InputActionMap Get() { return m_Wrapper.m_Keyboard; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(KeyboardActions set) { return set.Get(); }
            public void AddCallbacks(IKeyboardActions instance)
            {
                if (instance == null || m_Wrapper.m_KeyboardActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_KeyboardActionsCallbackInterfaces.Add(instance);
                @KeyboardKey.started += instance.OnKeyboardKey;
                @KeyboardKey.performed += instance.OnKeyboardKey;
                @KeyboardKey.canceled += instance.OnKeyboardKey;
            }

            private void UnregisterCallbacks(IKeyboardActions instance)
            {
                @KeyboardKey.started -= instance.OnKeyboardKey;
                @KeyboardKey.performed -= instance.OnKeyboardKey;
                @KeyboardKey.canceled -= instance.OnKeyboardKey;
            }

            public void RemoveCallbacks(IKeyboardActions instance)
            {
                if (m_Wrapper.m_KeyboardActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IKeyboardActions instance)
            {
                foreach (var item in m_Wrapper.m_KeyboardActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_KeyboardActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public KeyboardActions @Keyboard => new KeyboardActions(this);

        // Pointer
        private readonly InputActionMap m_Pointer;
        private List<IPointerActions> m_PointerActionsCallbackInterfaces = new List<IPointerActions>();
        public struct PointerActions
        {
            private @LibretroInputActions m_Wrapper;
            public PointerActions(@LibretroInputActions wrapper) { m_Wrapper = wrapper; }
            public InputActionMap Get() { return m_Wrapper.m_Pointer; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PointerActions set) { return set.Get(); }
            public void AddCallbacks(IPointerActions instance)
            {
                if (instance == null || m_Wrapper.m_PointerActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PointerActionsCallbackInterfaces.Add(instance);
            }

            private void UnregisterCallbacks(IPointerActions instance)
            {
            }

            public void RemoveCallbacks(IPointerActions instance)
            {
                if (m_Wrapper.m_PointerActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPointerActions instance)
            {
                foreach (var item in m_Wrapper.m_PointerActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PointerActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PointerActions @Pointer => new PointerActions(this);

        // Lightgun
        private readonly InputActionMap m_Lightgun;
        private List<ILightgunActions> m_LightgunActionsCallbackInterfaces = new List<ILightgunActions>();
        private readonly InputAction m_Lightgun_LightgunTrigger;
        private readonly InputAction m_Lightgun_LightgunReload;
        private readonly InputAction m_Lightgun_LightgunA;
        private readonly InputAction m_Lightgun_LightgunB;
        private readonly InputAction m_Lightgun_LightgunStart;
        private readonly InputAction m_Lightgun_LightgunSelect;
        private readonly InputAction m_Lightgun_LightgunC;
        private readonly InputAction m_Lightgun_LightgunDPadUp;
        private readonly InputAction m_Lightgun_LightgunDPadDown;
        private readonly InputAction m_Lightgun_LightgunDPadLeft;
        private readonly InputAction m_Lightgun_LightgunDPadRight;
        public struct LightgunActions
        {
            private @LibretroInputActions m_Wrapper;
            public LightgunActions(@LibretroInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @LightgunTrigger => m_Wrapper.m_Lightgun_LightgunTrigger;
            public InputAction @LightgunReload => m_Wrapper.m_Lightgun_LightgunReload;
            public InputAction @LightgunA => m_Wrapper.m_Lightgun_LightgunA;
            public InputAction @LightgunB => m_Wrapper.m_Lightgun_LightgunB;
            public InputAction @LightgunStart => m_Wrapper.m_Lightgun_LightgunStart;
            public InputAction @LightgunSelect => m_Wrapper.m_Lightgun_LightgunSelect;
            public InputAction @LightgunC => m_Wrapper.m_Lightgun_LightgunC;
            public InputAction @LightgunDPadUp => m_Wrapper.m_Lightgun_LightgunDPadUp;
            public InputAction @LightgunDPadDown => m_Wrapper.m_Lightgun_LightgunDPadDown;
            public InputAction @LightgunDPadLeft => m_Wrapper.m_Lightgun_LightgunDPadLeft;
            public InputAction @LightgunDPadRight => m_Wrapper.m_Lightgun_LightgunDPadRight;
            public InputActionMap Get() { return m_Wrapper.m_Lightgun; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(LightgunActions set) { return set.Get(); }
            public void AddCallbacks(ILightgunActions instance)
            {
                if (instance == null || m_Wrapper.m_LightgunActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_LightgunActionsCallbackInterfaces.Add(instance);
                @LightgunTrigger.started += instance.OnLightgunTrigger;
                @LightgunTrigger.performed += instance.OnLightgunTrigger;
                @LightgunTrigger.canceled += instance.OnLightgunTrigger;
                @LightgunReload.started += instance.OnLightgunReload;
                @LightgunReload.performed += instance.OnLightgunReload;
                @LightgunReload.canceled += instance.OnLightgunReload;
                @LightgunA.started += instance.OnLightgunA;
                @LightgunA.performed += instance.OnLightgunA;
                @LightgunA.canceled += instance.OnLightgunA;
                @LightgunB.started += instance.OnLightgunB;
                @LightgunB.performed += instance.OnLightgunB;
                @LightgunB.canceled += instance.OnLightgunB;
                @LightgunStart.started += instance.OnLightgunStart;
                @LightgunStart.performed += instance.OnLightgunStart;
                @LightgunStart.canceled += instance.OnLightgunStart;
                @LightgunSelect.started += instance.OnLightgunSelect;
                @LightgunSelect.performed += instance.OnLightgunSelect;
                @LightgunSelect.canceled += instance.OnLightgunSelect;
                @LightgunC.started += instance.OnLightgunC;
                @LightgunC.performed += instance.OnLightgunC;
                @LightgunC.canceled += instance.OnLightgunC;
                @LightgunDPadUp.started += instance.OnLightgunDPadUp;
                @LightgunDPadUp.performed += instance.OnLightgunDPadUp;
                @LightgunDPadUp.canceled += instance.OnLightgunDPadUp;
                @LightgunDPadDown.started += instance.OnLightgunDPadDown;
                @LightgunDPadDown.performed += instance.OnLightgunDPadDown;
                @LightgunDPadDown.canceled += instance.OnLightgunDPadDown;
                @LightgunDPadLeft.started += instance.OnLightgunDPadLeft;
                @LightgunDPadLeft.performed += instance.OnLightgunDPadLeft;
                @LightgunDPadLeft.canceled += instance.OnLightgunDPadLeft;
                @LightgunDPadRight.started += instance.OnLightgunDPadRight;
                @LightgunDPadRight.performed += instance.OnLightgunDPadRight;
                @LightgunDPadRight.canceled += instance.OnLightgunDPadRight;
            }

            private void UnregisterCallbacks(ILightgunActions instance)
            {
                @LightgunTrigger.started -= instance.OnLightgunTrigger;
                @LightgunTrigger.performed -= instance.OnLightgunTrigger;
                @LightgunTrigger.canceled -= instance.OnLightgunTrigger;
                @LightgunReload.started -= instance.OnLightgunReload;
                @LightgunReload.performed -= instance.OnLightgunReload;
                @LightgunReload.canceled -= instance.OnLightgunReload;
                @LightgunA.started -= instance.OnLightgunA;
                @LightgunA.performed -= instance.OnLightgunA;
                @LightgunA.canceled -= instance.OnLightgunA;
                @LightgunB.started -= instance.OnLightgunB;
                @LightgunB.performed -= instance.OnLightgunB;
                @LightgunB.canceled -= instance.OnLightgunB;
                @LightgunStart.started -= instance.OnLightgunStart;
                @LightgunStart.performed -= instance.OnLightgunStart;
                @LightgunStart.canceled -= instance.OnLightgunStart;
                @LightgunSelect.started -= instance.OnLightgunSelect;
                @LightgunSelect.performed -= instance.OnLightgunSelect;
                @LightgunSelect.canceled -= instance.OnLightgunSelect;
                @LightgunC.started -= instance.OnLightgunC;
                @LightgunC.performed -= instance.OnLightgunC;
                @LightgunC.canceled -= instance.OnLightgunC;
                @LightgunDPadUp.started -= instance.OnLightgunDPadUp;
                @LightgunDPadUp.performed -= instance.OnLightgunDPadUp;
                @LightgunDPadUp.canceled -= instance.OnLightgunDPadUp;
                @LightgunDPadDown.started -= instance.OnLightgunDPadDown;
                @LightgunDPadDown.performed -= instance.OnLightgunDPadDown;
                @LightgunDPadDown.canceled -= instance.OnLightgunDPadDown;
                @LightgunDPadLeft.started -= instance.OnLightgunDPadLeft;
                @LightgunDPadLeft.performed -= instance.OnLightgunDPadLeft;
                @LightgunDPadLeft.canceled -= instance.OnLightgunDPadLeft;
                @LightgunDPadRight.started -= instance.OnLightgunDPadRight;
                @LightgunDPadRight.performed -= instance.OnLightgunDPadRight;
                @LightgunDPadRight.canceled -= instance.OnLightgunDPadRight;
            }

            public void RemoveCallbacks(ILightgunActions instance)
            {
                if (m_Wrapper.m_LightgunActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ILightgunActions instance)
            {
                foreach (var item in m_Wrapper.m_LightgunActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_LightgunActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public LightgunActions @Lightgun => new LightgunActions(this);
        private int m_KeyboardMouseSchemeIndex = -1;
        public InputControlScheme KeyboardMouseScheme
        {
            get
            {
                if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
                return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
            }
        }
        private int m_GamepadSchemeIndex = -1;
        public InputControlScheme GamepadScheme
        {
            get
            {
                if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
                return asset.controlSchemes[m_GamepadSchemeIndex];
            }
        }
        private int m_QuestSchemeIndex = -1;
        public InputControlScheme QuestScheme
        {
            get
            {
                if (m_QuestSchemeIndex == -1) m_QuestSchemeIndex = asset.FindControlSchemeIndex("Quest");
                return asset.controlSchemes[m_QuestSchemeIndex];
            }
        }
        public interface IAnalogActions
        {
            void OnAnalogLeft(InputAction.CallbackContext context);
            void OnAnalogRight(InputAction.CallbackContext context);
        }
        public interface IJoypadActions
        {
            void OnJoypadDPadUp(InputAction.CallbackContext context);
            void OnJoypadDPadDown(InputAction.CallbackContext context);
            void OnJoypadDPadLeft(InputAction.CallbackContext context);
            void OnJoypadDPadRight(InputAction.CallbackContext context);
            void OnJoypadStart(InputAction.CallbackContext context);
            void OnJoypadSelect(InputAction.CallbackContext context);
            void OnJoypadA(InputAction.CallbackContext context);
            void OnJoypadB(InputAction.CallbackContext context);
            void OnJoypadX(InputAction.CallbackContext context);
            void OnJoypadY(InputAction.CallbackContext context);
            void OnJoypadL1(InputAction.CallbackContext context);
            void OnJoypadL2(InputAction.CallbackContext context);
            void OnJoypadL3(InputAction.CallbackContext context);
            void OnJoypadR1(InputAction.CallbackContext context);
            void OnJoypadR2(InputAction.CallbackContext context);
            void OnJoypadR3(InputAction.CallbackContext context);
        }
        public interface IMouseActions
        {
            void OnMousePositionDelta(InputAction.CallbackContext context);
            void OnMouseWheelDelta(InputAction.CallbackContext context);
            void OnMouseLeftButton(InputAction.CallbackContext context);
            void OnMouseRightButton(InputAction.CallbackContext context);
            void OnMouseMiddleButton(InputAction.CallbackContext context);
            void OnMouseForwardButton(InputAction.CallbackContext context);
            void OnMouseBackButton(InputAction.CallbackContext context);
        }
        public interface IKeyboardActions
        {
            void OnKeyboardKey(InputAction.CallbackContext context);
        }
        public interface IPointerActions
        {
        }
        public interface ILightgunActions
        {
            void OnLightgunTrigger(InputAction.CallbackContext context);
            void OnLightgunReload(InputAction.CallbackContext context);
            void OnLightgunA(InputAction.CallbackContext context);
            void OnLightgunB(InputAction.CallbackContext context);
            void OnLightgunStart(InputAction.CallbackContext context);
            void OnLightgunSelect(InputAction.CallbackContext context);
            void OnLightgunC(InputAction.CallbackContext context);
            void OnLightgunDPadUp(InputAction.CallbackContext context);
            void OnLightgunDPadDown(InputAction.CallbackContext context);
            void OnLightgunDPadLeft(InputAction.CallbackContext context);
            void OnLightgunDPadRight(InputAction.CallbackContext context);
        }
    }
}
